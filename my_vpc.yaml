
      SubnetId: !Ref PublicSubnetA
      RouteTableId: !Ref PublicRouteTable
  PublicSubnetRouteTableAssociationB:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnetB
      RouteTableId: !Ref PublicRouteTable
  PublicSubnetRouteTableAssociationC:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnetC
      RouteTableId: !Ref PublicRouteTable      

###########################################################################################
  PrivateSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref Vpc
      CidrBlock: !Select [ !Ref PrivateSubnetACidrBlock, !Cidr [ !Ref VpcCidr, 256, 8 ]]
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      Tags:
        - { Key: Name, Value: PrivateSubnetA }
        - { Key: Environment, Value: !Ref Environment }
        - { Key: Project, Value: !Ref Project }

  PrivateSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref Vpc
      CidrBlock: !Select [ !Ref PrivateSubnetBCidrBlock, !Cidr [ !Ref VpcCidr, 256, 8 ]]
      AvailabilityZone: !Select [1, !GetAZs '']
      Tags:
        - { Key: Name, Value: PrivateSubnetB }
        - { Key: Environment, Value: !Ref Environment }
        - { Key: Project, Value: !Ref Project }

  PrivateSubnetC:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref Vpc
      CidrBlock: !Select [ !Ref PrivateSubnetCCidrBlock, !Cidr [ !Ref VpcCidr, 256, 8 ]]
      AvailabilityZone: !Select [ 2, !GetAZs '' ]
      Tags:
        - { Key: Name, Value: PrivateSubnetC }
        - { Key: Environment, Value: !Ref Environment }
        - { Key: Project, Value: !Ref Project }

  PrivateRouteTableA:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref Vpc
      Tags:
        - { Key: Name, Value: PrivateRouteTableA }
        - { Key: Environment, Value: !Ref Environment }
        - { Key: Project, Value: !Ref Project }
  PrivateRouteTableB:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref Vpc
      Tags:
        - { Key: Name, Value: PrivateRouteTableB }
        - { Key: Environment, Value: !Ref Environment }
        - { Key: Project, Value: !Ref Project }
  PrivateRouteTableC:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref Vpc
      Tags:
        - { Key: Name, Value: PrivateRouteTableC }
        - { Key: Environment, Value: !Ref Environment }
        - { Key: Project, Value: !Ref Project }

  PrivateSubnetRouteTableAssociationA:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnetA
      RouteTableId: !Ref PrivateRouteTableA
  PrivateSubnetRouteTableAssociationB:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnetB
      RouteTableId: !Ref PrivateRouteTableB
  PrivateSubnetRouteTableAssociationC:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnetC
      RouteTableId: !Ref PrivateRouteTableC

  DefaultRouteA:
    DependsOn: NATGatewayA
    Type: AWS::EC2::Route
    Properties:
        RouteTableId: !Ref PrivateRouteTableA
        DestinationCidrBlock: '0.0.0.0/0'
        NatGatewayId: !Ref NATGatewayA

  RoutetoSecondaryVPC:
    Type: AWS::EC2::Route
    Properties:
        RouteTableId: !Ref PrivateRouteTableA
        DestinationCidrBlock: '10.222.0.0/16'
        VpcPeeringConnectionId: pcx-0a2736dfb088925e4       

  DefaultRouteB:
    DependsOn: NATGatewayB
    Type: AWS::EC2::Route
    Properties:
        RouteTableId: !Ref PrivateRouteTableB
        DestinationCidrBlock: '0.0.0.0/0'
        NatGatewayId: !Ref NATGatewayB

  DefaultRouteC:
    DependsOn: NATGatewayC
    Type: AWS::EC2::Route
    Properties:
        RouteTableId: !Ref PrivateRouteTableC
        DestinationCidrBlock: '0.0.0.0/0'
        NatGatewayId: !Ref NATGatewayC        

###########################################################################

  NatGwEipA:
    Type: AWS::EC2::EIP
    Properties:
      Domain: !Ref Vpc

  NatGwEipB:
    Type: AWS::EC2::EIP
    Properties:
      Domain: !Ref Vpc

  NatGwEipC:
    Type: AWS::EC2::EIP
    Properties:
      Domain: !Ref Vpc

  NATGatewayA:
    Type: AWS::EC2::NatGateway
    Properties:
        AllocationId: !GetAtt NatGwEipA.AllocationId
        SubnetId: !Ref PublicSubnetA
        Tags:
          - { Key: Name, Value: NatGatewayA }
          - { Key: Environment, Value: !Ref Environment }
          - { Key: Project, Value: !Ref Project }

  NATGatewayB:
    Type: AWS::EC2::NatGateway
    Properties:
        AllocationId: !GetAtt NatGwEipB.AllocationId
        SubnetId: !Ref PublicSubnetB
        Tags:
          - { Key: Name, Value: NatGatewayB }
          - { Key: Environment, Value: !Ref Environment }
          - { Key: Project, Value: !Ref Project }

  NATGatewayC:
    Type: AWS::EC2::NatGateway
    Properties:
        AllocationId: !GetAtt NatGwEipC.AllocationId
        SubnetId: !Ref PublicSubnetC
        Tags:
          - { Key: Name, Value: NatGatewayC }
          - { Key: Environment, Value: !Ref Environment }
          - { Key: Project, Value: !Ref Project }

Outputs:
  VpcId:
    Value: !Ref Vpc
    Export:
      Name: !Sub ${AWS::StackName}-VpcId

  VpcCidr:
    Value: !Ref VpcCidr
    Export:
      Name: !Sub ${AWS::StackName}-VpcCidr

  PublicSubnetAId:
    Value: !Ref PublicSubnetA
    Export:
      Name: !Sub ${AWS::StackName}-PublicSubnetAId

  PublicSubnetBId:
    Value: !Ref PublicSubnetB
    Export:
      Name: !Sub ${AWS::StackName}-PublicSubnetBId

  PublicSubnetCId:
    Value: !Ref PublicSubnetC
    Export:
      Name: !Sub ${AWS::StackName}-PublicSubnetCId

  PrivateSubnetAId:
    Value: !Ref PrivateSubnetA
    Export:
      Name: !Sub ${AWS::StackName}-PrivateSubnetAId

  PrivateSubnetBId:
    Value: !Ref PrivateSubnetB
    Export:
      Name: !Sub ${AWS::StackName}-PrivateSubnetBId

  PrivateSubnetCId:
    Value: !Ref PrivateSubnetC
    Export:
      Name: !Sub ${AWS::StackName}-PrivateSubnetCId 